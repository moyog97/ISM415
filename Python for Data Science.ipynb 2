{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">>>> # Problem: Sales Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src = 'img.jpg'>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**A company in the U.S asked us to help them analyze their one year data, so as to enable them make better decision the coming year.\n",
    "They are interested in the following.**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- What was the best month for sales? how much was earned that month?\n",
    "- What Product sold more?\n",
    "- What time should we display advertisements to maximize likelihood of customer's buying product?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">>>> ## Steps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**For this problem, we will perform three basic steps**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Data Importation\n",
    "+ Data Cleaning\n",
    "+ Data Analysis\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 1: Data Importation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we need to import the libraries for this analysis before moving on to import the data. the first library we will be using is the `Pandas` library, and we can import it using the `import` keyword, then we initialize it to `pd`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To start, create a new folder in your working directory and call it `Sales_Data`, then download and copy the data to that folder. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Reading CSV files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pandas makes reading of csv files very easy, all you need to do is to simply use the `.read_csv()` function in pandas and pass in the name of the dataset enclosed in strings and the format.\n",
    "Let’s try to read one of the sales data and see how it works.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('Sales_Data/Sales_January_2019.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see the first few rows in your data, we simply use the `head()` method.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>Purchase Address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>141234</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "      <td>700</td>\n",
       "      <td>01/22/19 21:25</td>\n",
       "      <td>944 Walnut St, Boston, MA 02215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>141235</td>\n",
       "      <td>Lightning Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>14.95</td>\n",
       "      <td>01/28/19 14:15</td>\n",
       "      <td>185 Maple St, Portland, OR 97035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>141236</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>2</td>\n",
       "      <td>11.99</td>\n",
       "      <td>01/17/19 13:33</td>\n",
       "      <td>538 Adams St, San Francisco, CA 94016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>141237</td>\n",
       "      <td>27in FHD Monitor</td>\n",
       "      <td>1</td>\n",
       "      <td>149.99</td>\n",
       "      <td>01/05/19 20:33</td>\n",
       "      <td>738 10th St, Los Angeles, CA 90001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>141238</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.99</td>\n",
       "      <td>01/25/19 11:59</td>\n",
       "      <td>387 10th St, Austin, TX 73301</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Order ID                   Product Quantity Ordered Price Each  \\\n",
       "0   141234                    iPhone                1        700   \n",
       "1   141235  Lightning Charging Cable                1      14.95   \n",
       "2   141236          Wired Headphones                2      11.99   \n",
       "3   141237          27in FHD Monitor                1     149.99   \n",
       "4   141238          Wired Headphones                1      11.99   \n",
       "\n",
       "       Order Date                       Purchase Address  \n",
       "0  01/22/19 21:25        944 Walnut St, Boston, MA 02215  \n",
       "1  01/28/19 14:15       185 Maple St, Portland, OR 97035  \n",
       "2  01/17/19 13:33  538 Adams St, San Francisco, CA 94016  \n",
       "3  01/05/19 20:33     738 10th St, Los Angeles, CA 90001  \n",
       "4  01/25/19 11:59          387 10th St, Austin, TX 73301  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have seen how to read a single `csv` file, let’s now see how we can read all the csv files in our Sales_Data folder at once."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import glob\n",
    "\n",
    "path = './Sales_Data' #use your path\n",
    "all_files = glob.glob(path + \"/*.csv\")\n",
    "\n",
    "li = []\n",
    "\n",
    "for filename in all_files:\n",
    "    df = pd.read_csv(filename, index_col= None, header=0)\n",
    "    li.append(df)\n",
    "    \n",
    "data = pd.concat(li, axis=0, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>Purchase Address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>176558</td>\n",
       "      <td>USB-C Charging Cable</td>\n",
       "      <td>2</td>\n",
       "      <td>11.95</td>\n",
       "      <td>4/19/2019 8:46</td>\n",
       "      <td>917 1st St, Dallas, TX 75001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>176559</td>\n",
       "      <td>Bose SoundSport Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>99.99</td>\n",
       "      <td>4/7/2019 22:30</td>\n",
       "      <td>682 Chestnut St, Boston, MA 02215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>176560</td>\n",
       "      <td>Google Phone</td>\n",
       "      <td>1</td>\n",
       "      <td>600</td>\n",
       "      <td>4/12/2019 14:38</td>\n",
       "      <td>669 Spruce St, Los Angeles, CA 90001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>176560</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.99</td>\n",
       "      <td>4/12/2019 14:38</td>\n",
       "      <td>669 Spruce St, Los Angeles, CA 90001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Order ID                     Product Quantity Ordered Price Each  \\\n",
       "0   176558        USB-C Charging Cable                2      11.95   \n",
       "1      NaN                         NaN              NaN        NaN   \n",
       "2   176559  Bose SoundSport Headphones                1      99.99   \n",
       "3   176560                Google Phone                1        600   \n",
       "4   176560            Wired Headphones                1      11.99   \n",
       "\n",
       "        Order Date                      Purchase Address  \n",
       "0   4/19/2019 8:46          917 1st St, Dallas, TX 75001  \n",
       "1              NaN                                   NaN  \n",
       "2   4/7/2019 22:30     682 Chestnut St, Boston, MA 02215  \n",
       "3  4/12/2019 14:38  669 Spruce St, Los Angeles, CA 90001  \n",
       "4  4/12/2019 14:38  669 Spruce St, Los Angeles, CA 90001  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(186850, 6)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2: Data Cleaning\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In doing exploratory data analysis, or even data science in general 70%  of your time is spent understanding and cleaning the data, so let’s see how we can clean up our data in order to make it useful for analysis.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first thing we check for in our data is if it contains missing values, to do that we simply use `isnull()`, then to count the number of missing values that exists in each column, we simply use `sum()`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Checking for missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Order ID            545\n",
       "Product             545\n",
       "Quantity Ordered    545\n",
       "Price Each          545\n",
       "Order Date          545\n",
       "Purchase Address    545\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that we have 545 missing values in each of our column. The next thing we do is to remove those missing values from our dataset. To do that, we use the `dropna()` function. After dropping the missing values, we check our data again for missing values.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Droping missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.dropna(how='any', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Order ID            0\n",
       "Product             0\n",
       "Quantity Ordered    0\n",
       "Price Each          0\n",
       "Order Date          0\n",
       "Purchase Address    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get the summary statistics of our data, we simply use ‘describe()’.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>Purchase Address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>186305</td>\n",
       "      <td>186305</td>\n",
       "      <td>186305</td>\n",
       "      <td>186305</td>\n",
       "      <td>186305</td>\n",
       "      <td>186305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>178438</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>24</td>\n",
       "      <td>142396</td>\n",
       "      <td>140788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Order ID</td>\n",
       "      <td>USB-C Charging Cable</td>\n",
       "      <td>1</td>\n",
       "      <td>11.95</td>\n",
       "      <td>Order Date</td>\n",
       "      <td>Purchase Address</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>355</td>\n",
       "      <td>21903</td>\n",
       "      <td>168552</td>\n",
       "      <td>21903</td>\n",
       "      <td>355</td>\n",
       "      <td>355</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Order ID               Product Quantity Ordered Price Each  \\\n",
       "count     186305                186305           186305     186305   \n",
       "unique    178438                    20               10         24   \n",
       "top     Order ID  USB-C Charging Cable                1      11.95   \n",
       "freq         355                 21903           168552      21903   \n",
       "\n",
       "        Order Date  Purchase Address  \n",
       "count       186305            186305  \n",
       "unique      142396            140788  \n",
       "top     Order Date  Purchase Address  \n",
       "freq           355               355  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the describe function give us the summary statistic of the columns in our dataset. Now let’s take a look at how we can index rows and columns in pandas dataframe.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Indexing in Dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To index a column in pandas dataframe is very easy, all we have to do is call the variable name for the data, then enclose the column name in quote and insert it into a square bracket. This hence create a pandas series. For instance, say we want to index the ‘Product’ column in our dataframe, we simply do this: `data[‘Product’]`, where data is our variable name for the dataset.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0               USB-C Charging Cable\n",
       "2         Bose SoundSport Headphones\n",
       "3                       Google Phone\n",
       "4                   Wired Headphones\n",
       "5                   Wired Headphones\n",
       "                     ...            \n",
       "186845        AAA Batteries (4-pack)\n",
       "186846                        iPhone\n",
       "186847                        iPhone\n",
       "186848        34in Ultrawide Monitor\n",
       "186849          USB-C Charging Cable\n",
       "Name: Product, Length: 186305, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Product']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That creates a pandas series, so indexing a dataframe is similar to indexing a list as we saw in last weeks lecture, where we looked at list.\n",
    "Now supposed we want to index more that one column, how do we do it. \n",
    "Well it’s simple, we simply use `[[ ]]`, the first square bracket signifies that you’re passing a list of columns, while the second just extracts the columns from the dataframe. Let’s look at an example\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USB-C Charging Cable</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bose SoundSport Headphones</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Google Phone</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186845</th>\n",
       "      <td>AAA Batteries (4-pack)</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186846</th>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186847</th>\n",
       "      <td>iPhone</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186848</th>\n",
       "      <td>34in Ultrawide Monitor</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186849</th>\n",
       "      <td>USB-C Charging Cable</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>186305 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Product Quantity Ordered\n",
       "0             USB-C Charging Cable                2\n",
       "2       Bose SoundSport Headphones                1\n",
       "3                     Google Phone                1\n",
       "4                 Wired Headphones                1\n",
       "5                 Wired Headphones                1\n",
       "...                            ...              ...\n",
       "186845      AAA Batteries (4-pack)                3\n",
       "186846                      iPhone                1\n",
       "186847                      iPhone                1\n",
       "186848      34in Ultrawide Monitor                1\n",
       "186849        USB-C Charging Cable                1\n",
       "\n",
       "[186305 rows x 2 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[['Product', 'Quantity Ordered']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "See how we were able to extract the two columns from the dataframe.\n",
    "Now let’s see some other function that we can also use.\n",
    "\n",
    "+ Say you want to see the list of columns in your dataset, you simply use `columns` function.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Order ID', 'Product', 'Quantity Ordered', 'Price Each', 'Order Date',\n",
       "       'Purchase Address'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ If you want to see the number of rows and columns in your dataset, you simply use the `shape` function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(186305, 6)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that in our data, we have a `date and time column` called `Order Date`. But the column isn’t really in the right format; so we have to convert the column into the appropriate ‘date and time column’, so that it will be easier to work with. To do that, we use the `to_datetime()` function from the pandas library.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Converting the `Order Date` to the normal date-time format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Order Date'] = pd.to_datetime(data['Order Date'], errors = 'coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>Purchase Address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>176558</td>\n",
       "      <td>USB-C Charging Cable</td>\n",
       "      <td>2</td>\n",
       "      <td>11.95</td>\n",
       "      <td>2019-04-19 08:46:00</td>\n",
       "      <td>917 1st St, Dallas, TX 75001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>176559</td>\n",
       "      <td>Bose SoundSport Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>99.99</td>\n",
       "      <td>2019-04-07 22:30:00</td>\n",
       "      <td>682 Chestnut St, Boston, MA 02215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>176560</td>\n",
       "      <td>Google Phone</td>\n",
       "      <td>1</td>\n",
       "      <td>600</td>\n",
       "      <td>2019-04-12 14:38:00</td>\n",
       "      <td>669 Spruce St, Los Angeles, CA 90001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>176560</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.99</td>\n",
       "      <td>2019-04-12 14:38:00</td>\n",
       "      <td>669 Spruce St, Los Angeles, CA 90001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>176561</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.99</td>\n",
       "      <td>2019-04-30 09:27:00</td>\n",
       "      <td>333 8th St, Los Angeles, CA 90001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Order ID                     Product Quantity Ordered Price Each  \\\n",
       "0   176558        USB-C Charging Cable                2      11.95   \n",
       "2   176559  Bose SoundSport Headphones                1      99.99   \n",
       "3   176560                Google Phone                1        600   \n",
       "4   176560            Wired Headphones                1      11.99   \n",
       "5   176561            Wired Headphones                1      11.99   \n",
       "\n",
       "           Order Date                      Purchase Address  \n",
       "0 2019-04-19 08:46:00          917 1st St, Dallas, TX 75001  \n",
       "2 2019-04-07 22:30:00     682 Chestnut St, Boston, MA 02215  \n",
       "3 2019-04-12 14:38:00  669 Spruce St, Los Angeles, CA 90001  \n",
       "4 2019-04-12 14:38:00  669 Spruce St, Los Angeles, CA 90001  \n",
       "5 2019-04-30 09:27:00     333 8th St, Los Angeles, CA 90001  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we create a column for the month, to do that, I have to index the month column `data[’Month’]` then I set it equal to the month value in the `Order Date` column by indexing it, an calling the value `data[‘Order Date’].dt.month`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Creating a column for the Month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Month'] = data['Order Date'].dt.month"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Having created the column for the month, we can also create another one for the hour, by simply following the same method we used for the month.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Hour'] = data['Order Date'].dt.hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order ID</th>\n",
       "      <th>Product</th>\n",
       "      <th>Quantity Ordered</th>\n",
       "      <th>Price Each</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>Purchase Address</th>\n",
       "      <th>Month</th>\n",
       "      <th>Hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>176558</td>\n",
       "      <td>USB-C Charging Cable</td>\n",
       "      <td>2</td>\n",
       "      <td>11.95</td>\n",
       "      <td>2019-04-19 08:46:00</td>\n",
       "      <td>917 1st St, Dallas, TX 75001</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>176559</td>\n",
       "      <td>Bose SoundSport Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>99.99</td>\n",
       "      <td>2019-04-07 22:30:00</td>\n",
       "      <td>682 Chestnut St, Boston, MA 02215</td>\n",
       "      <td>4.0</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>176560</td>\n",
       "      <td>Google Phone</td>\n",
       "      <td>1</td>\n",
       "      <td>600</td>\n",
       "      <td>2019-04-12 14:38:00</td>\n",
       "      <td>669 Spruce St, Los Angeles, CA 90001</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>176560</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.99</td>\n",
       "      <td>2019-04-12 14:38:00</td>\n",
       "      <td>669 Spruce St, Los Angeles, CA 90001</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>176561</td>\n",
       "      <td>Wired Headphones</td>\n",
       "      <td>1</td>\n",
       "      <td>11.99</td>\n",
       "      <td>2019-04-30 09:27:00</td>\n",
       "      <td>333 8th St, Los Angeles, CA 90001</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Order ID                     Product Quantity Ordered Price Each  \\\n",
       "0   176558        USB-C Charging Cable                2      11.95   \n",
       "2   176559  Bose SoundSport Headphones                1      99.99   \n",
       "3   176560                Google Phone                1        600   \n",
       "4   176560            Wired Headphones                1      11.99   \n",
       "5   176561            Wired Headphones                1      11.99   \n",
       "\n",
       "           Order Date                      Purchase Address  Month  Hour  \n",
       "0 2019-04-19 08:46:00          917 1st St, Dallas, TX 75001    4.0   8.0  \n",
       "2 2019-04-07 22:30:00     682 Chestnut St, Boston, MA 02215    4.0  22.0  \n",
       "3 2019-04-12 14:38:00  669 Spruce St, Los Angeles, CA 90001    4.0  14.0  \n",
       "4 2019-04-12 14:38:00  669 Spruce St, Los Angeles, CA 90001    4.0  14.0  \n",
       "5 2019-04-30 09:27:00     333 8th St, Los Angeles, CA 90001    4.0   9.0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are all set to start doing analysis.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 3: Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we are going to be answering questions like:\n",
    "    \n",
    "+ What was the best month for sales? how much was earned that month?\n",
    "+ What Product sold more?\n",
    "+ What time should we display advertisements to maximize likelihood of customer's buying product?\n",
    "So we start with the first question, but we notice that we don’t have a ‘Sales’ column in our dataset, but we know that `Sales = Price * quantity ordered`, so we create it.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Order ID              0\n",
       "Product               0\n",
       "Quantity Ordered      0\n",
       "Price Each            0\n",
       "Order Date          355\n",
       "Purchase Address      0\n",
       "Month               355\n",
       "Hour                355\n",
       "dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.dropna(how='any', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Order ID            0\n",
       "Product             0\n",
       "Quantity Ordered    0\n",
       "Price Each          0\n",
       "Order Date          0\n",
       "Purchase Address    0\n",
       "Month               0\n",
       "Hour                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Sales'] = data['Quantity Ordered'].astype('int') * data['Price Each'].astype('float')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> ### 1. What was the best month for sales? how much was earned that month?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To answer the above question, we simply use the `‘groupby()’` function which is used to split data based on some criteria.\n",
    "So to find out the months that made the most sales, we group the months based on the sales using the `groupby()` function and sum it.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Month\n",
       "1.0     1.822257e+06\n",
       "2.0     2.202022e+06\n",
       "3.0     2.807100e+06\n",
       "4.0     3.390670e+06\n",
       "5.0     3.152607e+06\n",
       "6.0     2.577802e+06\n",
       "7.0     2.647776e+06\n",
       "8.0     2.244468e+06\n",
       "9.0     2.097560e+06\n",
       "10.0    3.736727e+06\n",
       "11.0    3.199603e+06\n",
       "12.0    4.613443e+06\n",
       "Name: Sales, dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.groupby('Month')['Sales'].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the result, it is obvious to see that December has the highest number of sales. Now to make a plot of our results, we simply import the `‘pyplot’` function from a library called `‘matplotlib’` .\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After importing the library, we can simply make our plot by using the `‘plot()’`. Inside the plot, we can specify the kind of plot we want. In this case, we want to make a bar plot so we specify `kind = ‘bar’`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Sales')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.groupby('Month')['Sales'].sum().plot(kind = 'bar')\n",
    "plt.ylabel('Sales')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We used `plt.ylabel()` to specify a name for the y-axis.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> ### 2. What Product sold more?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To know what product sold more, is similar to asking for the frequency of each unique product in our dataset. For that reason, we first need to index the product column `data[‘Product’]`. Then we use the value_counts() function to get the frequency table. Finaly, we make a plot using the plot() function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "USB-C Charging Cable          21903\n",
       "Lightning Charging Cable      21658\n",
       "AAA Batteries (4-pack)        20641\n",
       "AA Batteries (4-pack)         20577\n",
       "Wired Headphones              18882\n",
       "Apple Airpods Headphones      15549\n",
       "Bose SoundSport Headphones    13325\n",
       "27in FHD Monitor               7507\n",
       "iPhone                         6842\n",
       "27in 4K Gaming Monitor         6230\n",
       "34in Ultrawide Monitor         6181\n",
       "Google Phone                   5525\n",
       "Flatscreen TV                  4800\n",
       "Macbook Pro Laptop             4724\n",
       "ThinkPad Laptop                4128\n",
       "20in Monitor                   4101\n",
       "Vareebadd Phone                2065\n",
       "LG Washing Machine              666\n",
       "LG Dryer                        646\n",
       "Name: Product, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Product'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Product'].value_counts().plot(kind = 'bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> ### 3. What time should we display advertisements to maximize likelihood of customer's buying product?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We tackle this question same way we tacked the first one, by grouping the ‘Hours’, then index the sales and finally making the plot.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.groupby('Hour')['Sales'].sum().plot()\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this, we know that the best time to display adverts is by 11 or 19"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Product\n",
       "20in Monitor                  109.99\n",
       "27in 4K Gaming Monitor        389.99\n",
       "27in FHD Monitor              149.99\n",
       "34in Ultrawide Monitor        379.99\n",
       "AA Batteries (4-pack)           3.84\n",
       "AAA Batteries (4-pack)          2.99\n",
       "Apple Airpods Headphones       150.0\n",
       "Bose SoundSport Headphones     99.99\n",
       "Flatscreen TV                  300.0\n",
       "Google Phone                   600.0\n",
       "LG Dryer                       600.0\n",
       "LG Washing Machine             600.0\n",
       "Lightning Charging Cable       14.95\n",
       "Macbook Pro Laptop            1700.0\n",
       "ThinkPad Laptop               999.99\n",
       "USB-C Charging Cable           11.95\n",
       "Vareebadd Phone                400.0\n",
       "Wired Headphones               11.99\n",
       "iPhone                         700.0\n",
       "Name: Price Each, dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.groupby('Product')['Price Each'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
